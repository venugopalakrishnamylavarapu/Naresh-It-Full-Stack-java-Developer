Yesterday class was about BLOB and CLOB

we will continue the session


java.sql.PreparedStatement

Methods:

public abstract void setBinaryStream(int,inputStream,int) throws SQLException;

->1st parameter is question mark,2nd is stream reference and 3rd is length of the stream
->The above method is used to set BLOB

public abstract void setCharacterStream(int,Reader,int) throws SQLException;

->The above method is used to set CLOB


RowSets:
========

A rowSet is an object that encapsulates set of rows from database.

RowSet is generated based on sql query.

Whenever rowset is generated then rowset pointer/cursor points to before first record.

There are five rowsets:
1)JdbcRowSet
2)CachedRowSet
3)WebRowSet
4)FilteredRowSet
5)JoinRowSet

The above all rowsets are interfaces in javax.sql.rowset package.


Differences between ResultSet and rowsets:
=========================================
	ResultSet						rowsets
	=========						=======
1)ResultSet is not Serializable object			1)All rowsets are serializable objects.
2)ResultSet is connected object				2)JdbcRowSet is a connected object and 	
							   remaining rowsets are disconnected objects
3)ResultSet is not a JavaBean.				3)All rowsets are java beans.
4)in order to get ResultSet we need 			4)in order to get rowset,we need rowset 
 Connection interface,DriverManger class and		  implementation class only.
 Statement interface.

Serialization:
=============
it is a process of converting an object into a series of bits.
in java,object must be serializable to do the following operations:
1)Writing an object to a file.
2)Reading an object from file.
3)Writing an object to a network.
4)Reading an object from network.

Class must implement java.io.Serializable interface to make serializable object.
java.io.Serializable interface is called as marker interface,tag interface or empty interface 
because no members in this interface.

Example:
=======
class Emp implements Serializable
{
	int empNo;
	String name;
	float salary;
}
Emp e=new Emp();  -->Now this object is called as Serializable object.