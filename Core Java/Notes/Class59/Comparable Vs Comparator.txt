mport java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;

public class ClassA 
{
	void meth1()
	{
		int arr[]= {4,9,7,3,6,2,1,5};
		System.out.println("Before sorting : "+Arrays.toString(arr));
		Arrays.sort(arr); // sorting the data in Array
		System.out.println("After sorting : "+Arrays.toString(arr));
		
		System.out.println("-----------------------------");
		System.out.println("       ArrayList        ");
		ArrayList<Integer> al=new ArrayList<Integer>();
		al.add(10);
		al.add(1);
		al.add(99);
		al.add(25);
		al.add(15);
		al.add(85);
		al.add(45);
		System.out.println("Before sorting : "+al);
		Collections.sort(al);
		System.out.println("After sorting : "+al);
		System.out.println("-----------------------------");
		System.out.println("       LinkedHashset        ");
		LinkedHashSet<Integer> hs=new LinkedHashSet<Integer>();
		hs.add(1);
		hs.add(9);
		hs.add(5);
		hs.add(7);
		hs.add(2);
		hs.add(6);
		hs.add(8);
		hs.add(4);
		System.out.println("Before sorting : "+hs);
		
		ArrayList<Integer> al2=new ArrayList<Integer>(hs);
		Collections.sort(al2);
		System.out.println("After sorting : "+al2);
		
		
	}
	public static void main(String[] args) 
	{
		new ClassA().meth1();		
	}
}
======================================================================================
Comparable Interface :
-----------------------------
public class ClassA implements Comparable<ClassA>
{
	String empName;
	int empId;
	String empDept;
	
	public ClassA(String empName, int empId, String empDept) 
	{
		this.empName = empName;
		this.empId = empId;
		this.empDept = empDept;
	}

	@Override
	public String toString() 
	{
		return empName + "  " + empId + "  " + empDept;
	}

	@Override
	public int compareTo(ClassA o) 
	{
		//return this.empId-o.empId; // sorting basing on empId
		//return this.empName.compareTo(o.empName); // sorting basing on empName
		return this.empDept.compareTo(o.empDept); // sorting basing on empDept
	}	
}
-------------------------------------------
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;

public class ClassB  
{	
	void meth1()
	{
		ArrayList<ClassA> al=new ArrayList<ClassA>();
		ClassA aobj1=new ClassA("Kishan", 100, "Java");
		ClassA aobj2=new ClassA("Vijay", 109, "Arts");
		ClassA aobj3=new ClassA("Arun", 107, "Oracle");
		
		al.add(aobj1);
		al.add(aobj2);
		al.add(aobj3);
		
		System.out.println(al);
		System.out.println("---------------------------");
		
		Collections.sort(al);
		
		Iterator<ClassA> i=al.iterator();
		while(i.hasNext())
		{
			System.out.println(i.next());			
		}
	}
	public static void main(String[] args) 
	{
		new ClassB().meth1();		
	}
}
====================================================================================
Comparator Interface:
------------------------------
public class ClassA 
{
	String empName;
	int empId;
	String empDept;
	
	public ClassA(String empName, int empId, String empDept) 
	{
		this.empName = empName;
		this.empId = empId;
		this.empDept = empDept;
	}
	public String getEmpName() 
	{
		return empName;
	}
	public int getEmpId() 
	{
		return empId;
	}
	public String getEmpDept() 
	{
		return empDept;
	}
	@Override
	public String toString() 
	{
		return empName + "  " + empId + "  " + empDept;
	}		
}
------------------------
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;

public class ClassB  
{	
	void meth1()
	{
		ArrayList<ClassA> al=new ArrayList<ClassA>();
		ClassA aobj1=new ClassA("Kishan", 100, "Java");
		ClassA aobj2=new ClassA("Vijay", 109, "Arts");
		ClassA aobj3=new ClassA("Arun", 107, "Oracle");
		
		al.add(aobj1);
		al.add(aobj2);
		al.add(aobj3);
		
		System.out.println(al);
		System.out.println("---------------------------");
		
		Collections.sort(al,new ClassC());
		
		Iterator<ClassA> i=al.iterator();
		while(i.hasNext())
		{
			System.out.println(i.next());			
		}
	}
	public static void main(String[] args) 
	{
		new ClassB().meth1();		
	}
}
---------------------------------------
import java.util.Comparator;

public class ClassC implements Comparator<ClassA>
{

	@Override
	public int compare(ClassA o1, ClassA o2) 
	{
		//return o1.getEmpId()-o2.getEmpId(); // sorting basing on empID
		//return o1.getEmpName().compareTo(o2.getEmpName());// sorting basing on empName
		return o1.getEmpDept().compareTo(o2.getEmpDept());
	}
		
}