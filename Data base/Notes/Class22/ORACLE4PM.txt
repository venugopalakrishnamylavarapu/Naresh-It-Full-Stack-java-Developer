==============================================================================
DATAINTEGRITY:
==============
	- TO MAINTAIN ACCURATE AND CONSISTENCY DATA IN DB TABLES.
		1. DECLARATIVE INTEGRITY
			> CAN IMPLEMENTING BY USING "CONSTRAINTS"(SQL)
		2. PROCEDURAL INTEGRITY 
			> CAN IMPLEMENTING BY USING "TRIGGERS"(PL/SQL)

1. DECLARATIVE INTEGRITY:
=========================
	i) ENTITY INTEGRITY
	ii) REFERENCIAL INTEGRITY
	iii) DOMAIN INTEGRITY

i) ENTITY INTEGRITY:
==================
	- IT ENSURE THAT EACH ROW IN A TABLE SHOULD BE UNIQUE IDENTITY.
	- IT CAN BE IMPLEMENTED BY USING "UNIQUE , PRIMARY KEY" CONSTRAINTS.

ii) REFERENCIAL INTEGRITY:
=========================
	- TO MAKING RELATIONSHIPS BETWEEN TABLES.
	- BY USING "FOREIGN KEY" CONSTRAINT.

iii) DOMAIN INTEGRITY:
====================
	- TO CHECK VALUES WITH USER DEFINED CONDITION BEFORE ACCEPTING 
	INTO A COLUMN.
	- IT CAN BE IMPLEMENTED BY USING "CHECK,NOT NULL,DEFAULT" CONSTRAINTS.

CONSTRAINTS:
=============
	- ARE USED TO RESTRICTED / ENFORCE UNWANTED DATA FROM DB TABLES.
	- THESE ARE 6 TYPES,
		> UNIQUE
		> NOT NULL
		> CHECK
		> PRIMARY KEY
		> FOREIGN KEY / REFERENCES 
		> DEFAULT 
	- ALL DATABASES ARE SUPPORTING TWO TYPES OF METHODS TO DEFINED 
CONSTRAINTS ON A TABLE.

i) COLUMN LEVEL:
================
	- TO DEFINE A CONSTRAINT ON EACH COLUMN WISE.

SYNTAX:
=======
CREATE TABLE <TABLE NAME>
(
<COLUMN NAME1> <DATATYPE>[SIZE] <CONSTRAINT TYPE>,
<COLUMN NAME2> <DATATYPE>[SIZE] <CONSTRAINT TYPE>,
................................................................................................,
................................................................................................
);

ii) TABLE LEVEL:
==============
	- TO DEFINE A CONSTRAINT AFTER ALL COLUMNS ARE DESIGNED.
	i.e END OF THE TABLE.

SYNTAX:
=======
CREATE TABLE <TABLE NAME>
(
<COLUMN NAME1> <DATATYPE>[SIZE],
<COLUMN NAME2> <DATATYPE>[SIZE],
............................................................,
...........................................................,
<CONSTRAINT TYPE>(<COLUMN NAME1>,.........)
);

UNIQUE:
========
	- TO RESTRCITED DUPLICATE VALUES.
	- BUT ALLOWED "NULLS".
EX:
COLUMN LEVEL:
==============
SQL> CREATE TABLE TEST1
  2  (
  3  SNO INT UNIQUE,
  4  SNAME VARCHAR2(10) UNIQUE
  5  );

TESTING:
SQL> INSERT INTO TEST1 VALUES(1,'A');----------------ALLOWED
SQL> INSERT INTO TEST1 VALUES(1,'A');---------------NOT ALLOWED
SQL> INSERT INTO TEST1 VALUES(NULL,NULL);-----ALLOWED
SQL> INSERT INTO TEST1 VALUES(2,'B');-------ALLOWED

TABLE LEVEL:
============
SQL> CREATE TABLE TEST2
  2  (
  3  SNO INT,
  4  SNAME VARCHAR2(10),
  5  UNIQUE(SNO,SNAME) -----------------> COMPOSITE UNIQUE CONSTRAINT
  6  );

TESTING:
=========
SQL> INSERT INTO TEST2 VALUES(1,'A');------ALLOWED
SQL> INSERT INTO TEST2 VALUES(1,'A');------NOT ALLOWED
SQL> INSERT INTO TEST2 VALUES(2,'A');------ALLOWED

NOT NULL:
=========
	- TO RESTRICTED NULLS INTO A COLUMN.
	- IT CAN DEFINED AT COLUMN LEVEL ONLY.
	- BUT ALLOWED DULICATE VALUES.

EX:
SQL> CREATE TABLE TEST3(SNO INT NOT NULL,SNAME VARCHAR2(10) NOT NULL);

TESTING:
SQL> INSERT INTO TEST3 VALUES(1,'A');----------ALLOWED
SQL> INSERT INTO TEST3 VALUES(1,'A');---------ALLOWED
SQL> INSERT INTO TEST3 VALUES(NULL,NULL);----NOT ALLOWED

HOW TO DEFINED MULTIPLE CONSTRAINTS ON A COLUMN:
===================================================
EX:
SQL> CREATE TABLE TEST4(EID INT UNIQUE NOT NULL,
ENAME VARCHAR2(10) UNIQUE NOT NULL);

TESTING:
SQL> INSERT INTO TEST4 VALUES(101,'SMITH');----ALLOWED
SQL> INSERT INTO TEST4 VALUES(101,'SMITH');-----NO
SQL> INSERT INTO TEST4 VALUES(NULL,NULL);-----NO

CHECK:
=======
	- TO CHECK VALUES WITH USER DEFINED CONDITION ON A COLUMN.

EX:
COLUMN LEVEL:
===============
SQL> CREATE TABLE TEST5(ENAME VARCHAR2(10),SAL NUMBER(10) CHECK(SAL>10000));

TESTING:
SQL> INSERT INTO TEST5 VALUES('SMITH',8500);------NOT ALLOWED
SQL> INSERT INTO TEST5 VALUES('SMITH',12000);----ALLOWED

TABLE LEVEL:
============
SQL> CREATE TABLE TEST6(ENAME VARCHAR2(10),SAL NUMBER(10),
          CHECK(ENAME=LOWER(ENAME) AND SAL>=8000));

TESTING:
SQL> INSERT INTO TEST6 VALUES('ALLEN',10000);----NOT ALLOWED
SQL> INSERT INTO TEST6 VALUES('allen',7500);----NOT ALLOWED
SQL> INSERT INTO TEST6 VALUES('allen',10000);-----ALLOWED

PRIMARY KEY:
============
	- IT IS A COMBINATION OF UNIQUE AND NOT NULL.
	- IT NOT ALLOWED DUPLICATE VALUES AND NULLS.
	- A TABLE IS HAVING ONLY ONE PRIMARY KEY CONSTRAINT.

EX:
COLUMN LEVEL:
==============
SQL> CREATE TABLE PRODUCT(PCODE INT PRIMARY KEY,
          PNAME VARCHAR2(10));

TESTING:
SQL> INSERT INTO PRODUCT VALUES(1021,'C');--------ALLOWED
SQL> INSERT INTO PRODUCT VALUES(1021,'C++');------NO
SQL> INSERT INTO PRODUCT VALUES(NULL,'C++');------NO

TABLE LEVEL:
============
SQL> CREATE TABLE BRANCH(BCODE INT,
  2  BNAME VARCHAR2(10),
  3  BLOC VARCHAR2(10),
  4  PRIMARY KEY(BCODE,BNAME));---------COMPOSITE PRIMARY KEY CONSTRAINT

TESTING:
SQL> INSERT INTO BRANCH VALUES(1021,'SBI','SRNAGAR');------ALLOWED
SQL> INSERT INTO BRANCH VALUES(1021,'SBI','MADHAPUR');-----NO
SQL> INSERT INTO BRANCH VALUES(1022,'SBI','MADHAPUR');----ALLOWED

FOREIGN KEY(REFERENCES)
=========================
	- TO CREATE RELATIONSHIP BETWEEN TABLES.
	- BY USING RELATIONSHIP WE CAN TAKE REFERENCIAL(IDENTITY) DATA FROM 
ONE TABLE TO ANOTHER TABLE IN DATABASE.























