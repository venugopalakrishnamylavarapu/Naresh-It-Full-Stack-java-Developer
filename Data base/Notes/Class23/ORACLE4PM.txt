==============================================================================
DATAINTEGRITY:
==============
	- TO MAINTAIN ACCURATE AND CONSISTENCY DATA IN DB TABLES.
		1. DECLARATIVE INTEGRITY
			> CAN IMPLEMENTING BY USING "CONSTRAINTS"(SQL)
		2. PROCEDURAL INTEGRITY 
			> CAN IMPLEMENTING BY USING "TRIGGERS"(PL/SQL)

1. DECLARATIVE INTEGRITY:
=========================
	i) ENTITY INTEGRITY
	ii) REFERENCIAL INTEGRITY
	iii) DOMAIN INTEGRITY

i) ENTITY INTEGRITY:
==================
	- IT ENSURE THAT EACH ROW IN A TABLE SHOULD BE UNIQUE IDENTITY.
	- IT CAN BE IMPLEMENTED BY USING "UNIQUE , PRIMARY KEY" CONSTRAINTS.

ii) REFERENCIAL INTEGRITY:
=========================
	- TO MAKING RELATIONSHIPS BETWEEN TABLES.
	- BY USING "FOREIGN KEY" CONSTRAINT.

iii) DOMAIN INTEGRITY:
====================
	- TO CHECK VALUES WITH USER DEFINED CONDITION BEFORE ACCEPTING 
	INTO A COLUMN.
	- IT CAN BE IMPLEMENTED BY USING "CHECK,NOT NULL,DEFAULT" CONSTRAINTS.

CONSTRAINTS:
=============
	- ARE USED TO RESTRICTED / ENFORCE UNWANTED DATA FROM DB TABLES.
	- THESE ARE 6 TYPES,
		> UNIQUE
		> NOT NULL
		> CHECK
		> PRIMARY KEY
		> FOREIGN KEY / REFERENCES 
		> DEFAULT 
	- ALL DATABASES ARE SUPPORTING TWO TYPES OF METHODS TO DEFINED 
CONSTRAINTS ON A TABLE.

i) COLUMN LEVEL:
================
	- TO DEFINE A CONSTRAINT ON EACH COLUMN WISE.

SYNTAX:
=======
CREATE TABLE <TABLE NAME>
(
<COLUMN NAME1> <DATATYPE>[SIZE] <CONSTRAINT TYPE>,
<COLUMN NAME2> <DATATYPE>[SIZE] <CONSTRAINT TYPE>,
................................................................................................,
................................................................................................
);

ii) TABLE LEVEL:
==============
	- TO DEFINE A CONSTRAINT AFTER ALL COLUMNS ARE DESIGNED.
	i.e END OF THE TABLE.

SYNTAX:
=======
CREATE TABLE <TABLE NAME>
(
<COLUMN NAME1> <DATATYPE>[SIZE],
<COLUMN NAME2> <DATATYPE>[SIZE],
............................................................,
...........................................................,
<CONSTRAINT TYPE>(<COLUMN NAME1>,.........)
);

UNIQUE:
========
	- TO RESTRCITED DUPLICATE VALUES.
	- BUT ALLOWED "NULLS".
EX:
COLUMN LEVEL:
==============
SQL> CREATE TABLE TEST1
  2  (
  3  SNO INT UNIQUE,
  4  SNAME VARCHAR2(10) UNIQUE
  5  );

TESTING:
SQL> INSERT INTO TEST1 VALUES(1,'A');----------------ALLOWED
SQL> INSERT INTO TEST1 VALUES(1,'A');---------------NOT ALLOWED
SQL> INSERT INTO TEST1 VALUES(NULL,NULL);-----ALLOWED
SQL> INSERT INTO TEST1 VALUES(2,'B');-------ALLOWED

TABLE LEVEL:
============
SQL> CREATE TABLE TEST2
  2  (
  3  SNO INT,
  4  SNAME VARCHAR2(10),
  5  UNIQUE(SNO,SNAME) -----------------> COMPOSITE UNIQUE CONSTRAINT
  6  );

TESTING:
=========
SQL> INSERT INTO TEST2 VALUES(1,'A');------ALLOWED
SQL> INSERT INTO TEST2 VALUES(1,'A');------NOT ALLOWED
SQL> INSERT INTO TEST2 VALUES(2,'A');------ALLOWED

NOT NULL:
=========
	- TO RESTRICTED NULLS INTO A COLUMN.
	- IT CAN DEFINED AT COLUMN LEVEL ONLY.
	- BUT ALLOWED DULICATE VALUES.

EX:
SQL> CREATE TABLE TEST3(SNO INT NOT NULL,SNAME VARCHAR2(10) NOT NULL);

TESTING:
SQL> INSERT INTO TEST3 VALUES(1,'A');----------ALLOWED
SQL> INSERT INTO TEST3 VALUES(1,'A');---------ALLOWED
SQL> INSERT INTO TEST3 VALUES(NULL,NULL);----NOT ALLOWED

HOW TO DEFINED MULTIPLE CONSTRAINTS ON A COLUMN:
===================================================
EX:
SQL> CREATE TABLE TEST4(EID INT UNIQUE NOT NULL,
ENAME VARCHAR2(10) UNIQUE NOT NULL);

TESTING:
SQL> INSERT INTO TEST4 VALUES(101,'SMITH');----ALLOWED
SQL> INSERT INTO TEST4 VALUES(101,'SMITH');-----NO
SQL> INSERT INTO TEST4 VALUES(NULL,NULL);-----NO

CHECK:
=======
	- TO CHECK VALUES WITH USER DEFINED CONDITION ON A COLUMN.

EX:
COLUMN LEVEL:
===============
SQL> CREATE TABLE TEST5(ENAME VARCHAR2(10),SAL NUMBER(10) CHECK(SAL>10000));

TESTING:
SQL> INSERT INTO TEST5 VALUES('SMITH',8500);------NOT ALLOWED
SQL> INSERT INTO TEST5 VALUES('SMITH',12000);----ALLOWED

TABLE LEVEL:
============
SQL> CREATE TABLE TEST6(ENAME VARCHAR2(10),SAL NUMBER(10),
          CHECK(ENAME=LOWER(ENAME) AND SAL>=8000));

TESTING:
SQL> INSERT INTO TEST6 VALUES('ALLEN',10000);----NOT ALLOWED
SQL> INSERT INTO TEST6 VALUES('allen',7500);----NOT ALLOWED
SQL> INSERT INTO TEST6 VALUES('allen',10000);-----ALLOWED

PRIMARY KEY:
============
	- IT IS A COMBINATION OF UNIQUE AND NOT NULL.
	- IT NOT ALLOWED DUPLICATE VALUES AND NULLS.
	- A TABLE IS HAVING ONLY ONE PRIMARY KEY CONSTRAINT.

EX:
COLUMN LEVEL:
==============
SQL> CREATE TABLE PRODUCT(PCODE INT PRIMARY KEY,
          PNAME VARCHAR2(10));

TESTING:
SQL> INSERT INTO PRODUCT VALUES(1021,'C');--------ALLOWED
SQL> INSERT INTO PRODUCT VALUES(1021,'C++');------NO
SQL> INSERT INTO PRODUCT VALUES(NULL,'C++');------NO

TABLE LEVEL:
============
SQL> CREATE TABLE BRANCH(BCODE INT,
  2  BNAME VARCHAR2(10),
  3  BLOC VARCHAR2(10),
  4  PRIMARY KEY(BCODE,BNAME));---------COMPOSITE PRIMARY KEY CONSTRAINT

TESTING:
SQL> INSERT INTO BRANCH VALUES(1021,'SBI','SRNAGAR');------ALLOWED
SQL> INSERT INTO BRANCH VALUES(1021,'SBI','MADHAPUR');-----NO
SQL> INSERT INTO BRANCH VALUES(1022,'SBI','MADHAPUR');----ALLOWED

FOREIGN KEY(REFERENCES)
=========================
	- TO CREATE RELATIONSHIP BETWEEN TABLES.
	- BY USING RELATIONSHIP WE CAN TAKE REFERENCIAL(IDENTITY) DATA FROM 
ONE TABLE TO ANOTHER TABLE IN DATABASE.

BASIC RULES:
============
1. COMMON COLUMN NAME(OPTIONAL) IN BOTH TABLES.

2. COMMON COLUMN  DATATYPES MUST BE MATCH.(MANDATORY)

3. ONE TABLE SHOULD CONTAIN PRIMARY KEY AND ANOTHER TABLE SHOULD CONTAIN FOREIGN KEY BUT
PK AND FK COLUMN MUST BE COMMON COLUMN.

4. A PRIMARY KEY CONSTRAINT TABLE IS CALLED AS "PARENT" TABLE AND A FOREIGN KEY CONSTRAINT
TABLE IS CALLED AS "CHILD" TABLE.

5. A FOREIGN KEY COLUMN IS ALLOWED THE VALUES THOSE VALUES MUST BE IN PRIMARY KEY COLUMN.


	PARENT		CHILD
	TEST1		TEST2	
	======		======	
	SNO(PK)		SNO(FK)
	========		========
	1		1
	2		1
	3		2
			2
			3
			3
			3
			4----------ERROR
			NULL-----ALLOWED(ORPHAN)

6. BY DEFAULT FOREIGN KEY IS ALLOWED DUPLICATE AND NULLS.

EX:
SQL> CREATE TABLE DEPT1(DEPTNO INT PRIMARY KEY,DNAME VARCHAR2(10));--PARENT

SQL> INSERT INTO DEPT1 VALUES(10,'SALES');
SQL> INSERT INTO DEPT1 VALUES(20,'PRODUCTION');

SQL> CREATE TABLE EMP1(EID INT UNIQUE NOT NULL,
  2  ENAME VARCHAR2(10),DEPTNO INT REFERENCES
  3  DEPT1(DEPTNO));---CHILD

SQL> INSERT INTO EMP1 VALUES(1021,'SMITH',10);
SQL> INSERT INTO EMP1 VALUES(1022,'ALLEN',10);
SQL> INSERT INTO EMP1 VALUES(1023,'WARD',20);
.................................................................................;

NOTE:
=====
	- ONCE WE CREATED RELATIONSHIP BETWEEN TABLES THERE ARE TWO RULES
ARE COME INTO PICTURE.

RULE-1(INSERTION):
=================
	- WE CANNOT INSERT VALUES INTO FOREIGN KEY COLUMN IN CHILD TABLE 
THOSE VALUES ARE NOT EXISTING IN PRIMARY KEY COLUMN OF PARENT TABLE.

		NO PARENT = NO CHILD
EX:
SQL> INSERT INTO EMP1 VALUES(1025,'SCOTT',30);
ERROR at line 1:
ORA-02291: integrity constraint (MYDB4PM.SYS_C007550) violated - parent key not found

RULE-2(DELETION)
================
	- WE CANNOT DELETE A ROW FROM PARENT TABLE THOSE ROWS ARE HAVING 
THE CORRESPONDING CHILD ROWS IN CHILD TABLE WITHOUT ADDRESSING TO THE CHILD.

EX:
SQL> DELETE FROM DEPT1 WHERE DEPTNO=10
ERROR at line 1:
ORA-02292: integrity constraint (MYDB4PM.SYS_C007550) violated - child record found

HOW TO ADDRESS TO CHILD TABLE:
===============================
	> CASCADE RULES :
		1. ON DELETE CASCADE
		2. ON DELETE SET NULL

1. ON DELETE CASCADE:
======================
	- ONCE WE DELETE A ROW FROM PARENT TABLE THEN THE CORRESPONDING 
CHILD ROWS ARE ALSO DELETED FROM CHILD TABLE AUTOMATICALLY.

EX:
SQL> CREATE TABLE DEPT2(DEPTNO INT PRIMARY KEY,DNAME VARCHAR2(10));--PARENT

SQL> INSERT INTO DEPT2 VALUES(10,'SALES');
SQL> INSERT INTO DEPT2 VALUES(20,'PRODUCTION');

SQL> CREATE TABLE EMP2(EID INT UNIQUE NOT NULL,
    ENAME VARCHAR2(10),DEPTNO INT REFERENCES
    DEPT2(DEPTNO) ON DELETE CASCADE);---CHILD

SQL> INSERT INTO EMP2 VALUES(1021,'SMITH',10);
SQL> INSERT INTO EMP2 VALUES(1022,'ALLEN',10);
SQL> INSERT INTO EMP2 VALUES(1023,'WARD',20);

TESTING:
SQL> DELETE FROM DEPT2 WHERE DEPTNO=10;
1 row deleted.

2. ON DELETE SET NULL:
=====================
	- ONCE WE DELETE A ROW FROM PARENT TABLE THEN THE CORRESPONDING 
CHILD ROWS VALUES(i.e FOREIGN KEY COLUMN) ARE CONVERTING INTO NULLS
IN CHILD TABLE AUTOMATICALLY.
EX:
SQL> CREATE TABLE DEPT3(DEPTNO INT PRIMARY KEY,DNAME VARCHAR2(10));--PARENT

SQL> INSERT INTO DEPT3 VALUES(10,'SALES');
SQL> INSERT INTO DEPT3 VALUES(20,'PRODUCTION');

SQL> CREATE TABLE EMP3(EID INT UNIQUE NOT NULL,
    ENAME VARCHAR2(10),DEPTNO INT REFERENCES
    DEPT3(DEPTNO) ON DELETE SET NULL);---CHILD

SQL> INSERT INTO EMP3 VALUES(1021,'SMITH',10);
SQL> INSERT INTO EMP3 VALUES(1022,'ALLEN',10);
SQL> INSERT INTO EMP3 VALUES(1023,'WARD',20);

TESTING:
SQL> DELETE FROM DEPT3 WHERE DEPTNO=10;
1 row deleted.




