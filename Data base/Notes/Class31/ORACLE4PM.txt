SUBQUERY:
==========
	- A QUERY INSIDE ANOTHER QUERY IS CALLED AS "SUBQUERY".
	- SUBQUERY IS ALSO CALLED AS "NESTED QUERY".
	- A SUBQUERY STATEMENT IS HAVING TWO MORE QUERIES THOSE ARE,
		I) INNER QUERY / CHILD QUERY / SUB QUERY
		II) OUTER QUERY / PARENT QUERY / MAIN QUERY
	- AS PER THE EXECUTION PROCESS SUBQUERY STATEMENT IS CLASSIFIED INTO
	TWO WAYS,
		1. NON-CORELATED SUBQUERY:
		===========================
			FIRST : INNER QUERY
			LATER : OUTER QUERY

		2. CO-RELATED SUBQUERY:
		=======================
			FIRST : OUTER QUERY
			LATER : INNER QUERY

SYNTAX:
========
SELECT * FROM <TN> WHERE <CONDITION>(SELECT * FROM......(SELECT * FROM .........));

1. NON-CORELATED SUBQUERY:
===========================
	i) SINGLE ROW SUBQUERY
	ii) MULTIPLE ROW SUBQUERY
	iii) MULTIPLE COLUMN SUBQUERY
	iv) INLINE VIEW 

i) SINGLE ROW SUBQUERY:
=======================
	- WHENEVER  A SUBQUERY RETURN A SINGLE VALUE.	
	- CAN USE THE FOLLOWING OPERATORS ARE :
		" = , < , > , <= , >= , !="

EX:
WAQ T DISPLAY EMPLOYEES DETAILS WHO ARE EARNING THE FIRST HIGHEST SALARY?
	========================================
	||SUBQUERY = (OUTER QUERY + INNER QUERY); ||
	========================================

STEP1: INNER QUERY:
===================
SQL> SELECT MAX(SAL) FROM EMP;

STEP2: OUTER QUERY:
====================
SQL> SELECT * FROM EMP WHERE SAL=(INNER QEURY);

STEP3: SUBQUERY =(OUTER QUERY + INNER QUERY)
==============================================
SQL> SELECT * FROM EMP WHERE SAL=(SELECT MAX(SAL) FROM EMP);

EX:
WAQ TO DISPLAY THE SENIOR MOST EMPLOYEE DETAILS FROM EMP TABLE?
SQL> SELECT * FROM EMP WHERE HIREDATE=(SELECT MIN(HIREDATE) FROM EMP);

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE JOB IS SAME AS THE EMPLOYEE "SMITH" JOB?
SQL> SELECT * FROM EMP WHERE JOB=(SELECT JOB FROM EMP WHERE ENAME='SMITH');

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE SALARY IS MORE THAN THE MAXIMUM
SALARY OF "SALESMAN"?
SQL> SELECT * FROM EMP WHERE SAL >(SELECT MAX(SAL) FROM EMP 
         WHERE JOB='SALESMAN');

EX:
WAQ TO FIND OUT THE SECOND HIGHEST SALARY FROM EMP TABLE?
SQL> SELECT MAX(SAL) FROM EMP WHERE SAL<(SELECT MAX(SAL) FROM EMP);

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE EARNING THE SECOND HIGHEST SALARY FROM EMP TABLE?
SQL> SELECT * FROM EMP WHERE SAL=
(SELECT MAX(SAL) FROM EMP WHERE SAL<
(SELECT MAX(SAL) FROM EMP));

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE EARNING THE 3RD HIGHEST SALARY FROM EMP TABLE?
SQL> SELECT * FROM EMP WHERE SAL=
  2  (SELECT MAX(SAL) FROM EMP WHERE SAL<
  3  (SELECT MAX(SAL) FROM EMP WHERE SAL<
  4  (SELECT MAX(SAL) FROM EMP)));

		Nth	N+1
		===	===
		1ST	2Q
		2ND	3Q
		3RD	4Q
	
	
	
	
		30TH	31Q
	
	
	
		150TH	151Q

HOW TO OVERCOME THE ABOVE PROBLEM?
======================================
MULTIPLE ROW SUBQUERY:
========================
	- WHEN A SUBQUERY RETURN MORE THAN ONE VALUE IS CALLED AS "MRSQ".
	- WE CAN USE THE FOLLOWING OPERATORS ARE "IN,ANY,ALL".

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE EMPLOYEE JOB IS SAME AS THE EMPLOYEE
"SMITH" OR "MARTIN" JOBS?
SQL> SELECT * FROM EMP WHERE JOB IN(SELECT JOB FROM EMP
  2  WHERE ENAME='SMITH' OR ENAME='MARTIN');
			(OR)
SQL> SELECT * FROM EMP WHERE JOB IN(SELECT JOB FROM EMP
  2  WHERE ENAME IN('SMITH','MARTIN'));

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE EARNING MINIMUM AND MAXIMUM SALARY
FROM EMP TABLE?
SQL> SELECT * FROM EMP WHERE SAL IN
  2  (SELECT MIN(SAL) FROM EMP
  3  UNION
  4  SELECT MAX(SAL) FROM EMP
  5  );

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE GETTING MAXIMUM SALARY FROM EACH JOB
WISE?
SQL> SELECT * FROM EMP WHERE SAL IN(SELECT MAX(SAL) FROM EMP
         GROUP BY JOB);

EX:
WAQ TO DISPLAY THE SENIOR MOST EMPLOYEES FROM EACH DEPTNO WISE?
SQL> SELECT * FROM EMP WHERE HIREDATE IN(SELECT MIN(HIREDATE)
  2  FROM EMP GROUP BY DEPTNO);

WORKING WITH "ANY" , "ALL" OPERATORS:
=====================================
ANY :
=====
	- IT RETURNS "TRUE" IF ANY ONE VALUE IS SATISFIED IN THE LIST WITH THE GIVEN VALUE.
	
	EX: 
	i) X > ANY(10,20,30)
		IF X=40 ------> TRUE
		IF X=08 ------> FALSE
		IF X=25 ------> TRUE

ALL:
====
	- IT RETURNS "TRUE" IF ALL VALUES ARE SATISFIED IN THE LIST WITH THE GIVEN VALUE.
	
	EX: 
	i) X > ALL(10,20,30)
		IF X=40 ------> TRUE
		IF X=08 ------> FALSE
		IF X=25 ------> FALSE

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE SALARY IS MORE THAN ANY ONE "SALESMAN"
SALARY?
SQL> SELECT * FROM EMP WHERE SAL >ANY(SELECT SAL FROM EMP
          WHERE JOB='SALESMAN');

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE SALARY IS MORE THAN ALL "SALESMAN"
SALARIES?
SQL> SELECT * FROM EMP WHERE SAL >ALL(SELECT SAL FROM EMP
          WHERE JOB='SALESMAN');

UPDATING DATA IN EMP TABLE:
============================
SQL> UPDATE EMP SET SAL=1300 WHERE EMPNO=7902;

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE GETTING MAXIMUM SALARY FROM EACH JOB
WISE?
SQL> SELECT * FROM EMP WHERE SAL IN(SELECT MAX(SAL) FROM EMP
         GROUP BY JOB);

OUTPUT:
=======
ENAME      	JOB              	SAL
---------- -		-------- 		----------
ALLEN      	SALESMAN        	1600
JONES      	MANAGER         	2975
SCOTT      	ANALYST         	3000
KING       		PRESIDENT       	6000
FORD       		ANALYST         	1300
MILLER     	CLERK           	1300

NOTE:
=====
	- WHEN WE ARE COMPARING THE GORUP OF VALUES BY USING MULTIPLE ROW
SUBQUERY THEN ORACLE RETURNS THE WRONG RESULT.TO OVERCOME THE ABOVE 
PROBLEM WE USE "MULTIPLE COLUMN SUBQUERY" MECHANISM.

MULTIPLE COLUMN SUBQUERY:
===========================
	- COMPARING MULTIPLE COLUMNS VALUES OF INNER QUERY WITH MULTIPLE 
COLUMNS VALUES OF OUTER QUERY IS CALLED AS "MCSQ".

SYNTAX:
========
SELECT * FROM <TN> WHERE (<COLUMN NAME1>,<COLUMN NAME2>,...................)
IN(SELECT <COLUMN NAME1>,<COLUMN NAME2>,................FROM <TN>..........);

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE GETTING MAXIMUM SALARY FROM EACH JOB
WISE?

SOLUTION:
SQL> SELECT * FROM EMP WHERE(JOB,SAL)
  2  IN(SELECT JOB,MAX(SAL) FROM EMP
  3  GROUP BY JOB);

OUTPUT:
=======
ENAME      	JOB              	SAL
-----------		-------- 		----------
ALLEN      	SALESMAN        	1600
JONES      	MANAGER         	2975
SCOTT      	ANALYST         	3000
KING       		PRESIDENT       	6000
MILLER     	CLERK           	1300

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE EMPLOYEE JOB,MGR ARE SAME AS THE JOB,MGR
OF THE EMPLOYEE "SCOTT"?

SQL> SELECT * FROM EMP WHERE(JOB,MGR) IN(SELECT JOB,MGR
  2  FROM EMP WHERE ENAME='SCOTT');

PSEUDO COLUMNS:
==================
	- THESE COLUMNS ARE WORKING JUST LIKE A TABLE COLUMNS.
		1) ROWID
		2) ROWNUM

1) ROWID:
========
	- WHENEVER WE INSERT A NEW ROW INTO A TANLE INTERNALLY SYSTEM WILL
GENERATE A "UNIQUE ROW IDENTIFICATION ADDRESS" FOR EACH ROW WISE.
	- THESE ROWID's ARE STORED IN DATABASE SO THAT THESE ARE PERMANENT
ID's IN ORACLE DB.

EX:
SQL> SELECT ROWID,ENAME FROM EMP;
SQL> SELECT ROWID,ENAME,JOB FROM EMP WHERE JOB='MANAGER';

SQL> SELECT MIN(ROWID) FROM EMP;
SQL> SELECT MAX(ROWID) FROM EMP;

HOW TO DELETE MULTIPLE DUPLICATE ROWS EXCEPT ONE DUPLICATE ROW FROM A 
========================================================================
TABLE:
======

EX:
SQL> SELECT * FROM TEST;

       SNO NAME
---------- ----------
         1 A
         1 A
         1 A
         2 B
         3 C
         3 C
         4 D
         4 D
         4 D
         5 E
         5 E

SOLUTION:
=========
SQL> DELETE FROM TEST WHERE ROWID NOT IN(SELECT MAX(ROWID)
          FROM TEST GROUP BY SNO);

OUTPUT:
========
SQL> SELECT * FROM TEST;

       SNO NAME
---------- ----------
         1 A
         2 B
         3 C
         4 D
         5 E

2) ROWNUM:
===========
	- IT IS USED TO GENERATE ROW NUMBERS FOR EACH ROW WISE (OR)
FOR EACH GROUP OF ROWS WISE AUTOMATICALLY.
	- THESE ROW NUMBERS ARE NOT SAVED IN DB.SO THAT THESE ARE 
TEMPORARY NUMBERS.
	- BY USING ROWNUM PSEUDO COLUMN WE CAN PERFORM "TOP n" AND "Nth"
ROW OPERATIONS ON TABLE DATA.

EX:
SELECT ROWNUM,ENAME FROM EMP;
SELECT ROWNUM,ENAME,JOB FROM EMP WHERE JOB='MANAGER';

EX:
WAQ TO FETCH THE 1ST ROW DETAILS FROM EMP TABLE BY USING ROWNUM?
SQL> SELECT * FROM EMP WHERE ROWNUM=1;

EX:
WAQ TO FETCH THE 2ND ROW DETAILS FROM EMP TABLE BY USING ROWNUM?
SQL> SELECT * FROM EMP WHERE ROWNUM=2;
no rows selected

NOTE:
======
	- GENERALLY ROWNUM IS ALWAYS STARTS WITH "1" FOR EVERY SELECTED
ROW FROM A TABLE.SO TO OVERCOME THIS PROBLEM WE SHOULD USE THE FOLLOWING
OPERATORS ARE "< , < = ".

SOLUTION:
==========
SQL> SELECT * FROM EMP WHERE ROWNUM<=2
  2  MINUS
  3  SELECT * FROM EMP WHERE ROWNUM=1;

EX:
WAQ TO FETCH TOP 5 ROWS FROM EMP TABLE BY USING ROWNUM?
SQL> SELECT * FROM EMP WHERE ROWNUM<=5;

EX:
WAQ TO FETCH 5TH POSITION ROW FROM EMP TABLE BY USING ROWNUM?
SQL> SELECT * FROM EMP WHERE ROWNUM<=5
  2  MINUS
  3  SELECT * FROM EMP WHERE ROWNUM<=4;

EX:
WAQ TO FETCH FROM 3RD POSITION ROW TO 10TH POSITION ROW FROM EMP TABLE 
BY USING ROWNUM?
SQL> SELECT * FROM EMP WHERE ROWNUM<=10
  2  MINUS
  3  SELECT * FROM EMP WHERE ROWNUM<3;

EX:
WAQ TO FETCH THE LAST TWO ROWS FROM EMP TABLE BY USING ROWNUM?
SQL> SELECT * FROM EMP WHERE ROWNUM<=14
  2  MINUS
  3  SELECT * FROM EMP WHERE ROWNUM<=12;

		(OR)

SQL> SELECT * FROM EMP
  2  MINUS
  3  SELECT * FROM EMP WHERE ROWNUM<=(SELECT COUNT(*)-2 FROM EMP);

INLINE VIEW:
===========
	- PROVIDING A SELECT QUERY INPLACE OF A TABLE NAME IN SELECT  STATEMENT IS CALLED AS "INLINE VIEW".
		(OR)
	- PROVIDING A SELECT QUERY IN FROM CLAUSE IN SELECT STATEMENT IS
CALLED AS "INLINE VIEW".

SYNTAX:
========
SELECT    *   FROM (<SELECT QUERY>);------INLINE VIEW 

NOTE:
=====
	- IN THIS INLINE VIEW MECHANISM THE RESULT OF INNER QUERY WILL ACT AS 
A TABLE FOR OUTER QUERY.

CASE1: 
======
	- GENERALLY SUBQUERY IS NOT ALLOWED "ORDER BY" CLAUSE.SO THAT TO 
OVERCOME THIS WE NEED "INLINE VIEW".

CASE-2:
======
	- GENERALLY COLUMN ALIAS NAMES ARE NOT ALLOWED UNDER "WHERE CLAUSE" CONDITION.SO TO OVERCOME THIS PROBLEM WE NEED "INLINE VIEW".

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE ANNUAL SALARY IS MORE THAN 25000?
SQL> SELECT * FROM(SELECT EMPNO,ENAME,SAL,SAL*12 ANNSAL FROM EMP) 
          WHERE ANNSAL>25000;

HOW TO USE "ROWNUM" ALIAS NAME UNDER WHERE CLAUSE:
======================================================
EX:
WAQ TO FETCH 5TH POSITION ROW FROM EMP TABLE BY USING ROWNUM ALIAS NAME
ALONG WITH INLINE VIEW?
SQL> SELECT * FROM(SELECT ROWNUM R,EMPNO,ENAME FROM EMP) WHERE R=5;
		(OR)
SQL> SELECT * FROM(SELECT ROWNUM R,EMP.* FROM EMP) WHERE R=5;

EX:
WAQ TO FETCH 3RD,6TH,9TH,12TH ROWS FROM EMP TABLE BY USING ROWNUM ALIAS NAME ALONG WITH INLINE VIEW?
SQL> SELECT * FROM(SELECT ROWNUM R,EMP.* FROM EMP) WHERE R IN(3,6,9,12);

EX:
WAQ TO FETCH EVEN POSITION ROWS FROM EMP TABLE BY USING ROWNUM ALIAS NAME
ALONG WITH INLINE VIEW?
SQL> SELECT * FROM(SELECT ROWNUM R,EMP.* FROM EMP) WHERE MOD(R,2)=0;

EX:
WAQ TO FETCH THE 1ST AND THE LAST ROW FROM EMP TABLE BY USING ROWNUM
ALIAS NAME ALONG WITH INLINE VIEW?
SQL> SELECT * FROM(SELECT ROWNUM R,EMP.* FROM EMP) WHERE R=1 OR R=14;
			(OR)
SQL> SELECT * FROM(SELECT ROWNUM R,EMP.* FROM EMP) WHERE R IN(1,14);
			(OR)
SQL> SELECT * FROM(SELECT ROWNUM R,EMP.* FROM EMP)
         WHERE R=1 OR R=(SELECT COUNT(*) FROM EMP);
			(OR)
SQL> SELECT * FROM(SELECT ROWNUM R,EMP.* FROM EMP)
         WHERE R IN(1,(SELECT COUNT(*) FROM EMP));

USING "ORDER BY" CLAUSE IN SUBQUERY:
===================================
EX:
WAQ TO FETCH THE FIRST FIVE HIGHEST SALARIES EMPLOYEE ROWS FROM EMP TABLE BY USING ROWNUM ALONG WITH INLINE VIEW?
SQL> SELECT * FROM(SELECT * FROM EMP ORDER BY SAL DESC) WHERE ROWNUM<=5;

EX:
WAQ TO FETCH THE 5TH HIGHEST SALARY ROW FROM EMP TABLE BY USING ROWNUM
ALONG WITH INLINE VIEW?
SQL> SELECT * FROM(SELECT * FROM EMP ORDER BY SAL DESC) WHERE ROWNUM<=5
          MINUS
          SELECT * FROM(SELECT * FROM EMP ORDER BY SAL DESC) WHERE ROWNUM<=4;

ANALYTICAL FUNCTIONS:
=======================
	1. ROW_NUMBER()
	2. RANK()
	3. DENSE_RANK()
	- THE ABOVE FUNCTIONS ARE USED TO GENERATE RANKING NUMBERS FOR 
EACH ROW / FOR EACH GROUP OF ROWS WISE AUTOMATICALLY EXCEPT ROW_NUMBER().
THIS ROW_NUMBER() IS USED TO GENERATE SEQUENCE NUMBERS TO EACH ROW / TO 
EACH GROUP OF ROWS WISE.

	- RANK(),DENSE_RANK() ARE ASSIGNING SAME RANK NUMBERS TO SAME VALUE
BUT RANK() WILL SKIP THE NEXT RANK NUMBER IN THE ORDER WHEREAS DENSE_RANK()
WILL NOT SKIP THE NEXT RANK NUMBER IN THE ORDER.

EX:
ENAME	SALARY	ROW_NUMBER()	RANK()	DENSE_RANK()
======	=======	==============	=======	==============
A	85000	1		1	1
B	72000	2		2	2
C	72000	3		2	2
D	68000	4		4	3
E	55000	5		5	4
F	46000	6		6	5

SYNTAX:
========
ANALYTICAL FUNCTION NAME() OVER([PARTITION BY <COLUMN NAME>] ORDER BY <COLUMN NAME> <ASC/DESC>)

	Here,
		PARTITION BY CLAUSE ----------> OPTIONAL 
		ORDER BY CLAUSE ----------------> MANDATORY

WITHOUT PARTITION BY CLAUSE:
=============================
EX:
SQL> SELECT EMPNO,ENAME,SAL,ROW_NUMBER()
        OVER(ORDER BY SAL DESC) ROWNUMBERS FROM EMP;

SQL> SELECT EMPNO,ENAME,SAL,RANK()
         OVER(ORDER BY SAL DESC) ROWNUMBERS FROM EMP;

SQL> SELECT EMPNO,ENAME,SAL,DENSE_RANK()
        OVER(ORDER BY SAL DESC) ROWNUMBERS FROM EMP;

WITH PARTITION BY CLAUSE:
=============================
EX:
SQL> SELECT EMPNO,ENAME,DEPTNO,SAL,
  2  ROW_NUMBER()OVER(PARTITION BY DEPTNO ORDER BY SAL DESC)
  3  ROWNUMBERS FROM EMP;

SQL> SELECT EMPNO,ENAME,DEPTNO,SAL,
  2  RANK()OVER(PARTITION BY DEPTNO ORDER BY SAL DESC)
  3  RANKS FROM EMP;

SQL> SELECT EMPNO,ENAME,DEPTNO,SAL,
         DENSE_RANK()OVER(PARTITION BY DEPTNO ORDER BY SAL DESC)
         RANKS FROM EMP

EX:
WAQ TO DISPLAY 4TH HIGHEST SALARY EMPLOYEE FROM EACH DEPTNO WISE BY USING
DENSE_RANK() ALONG INLINE VIEW?
SQL> SELECT * FROM(SELECT EMPNO,ENAME,DEPTNO,SAL,
  2           DENSE_RANK()OVER(PARTITION BY DEPTNO ORDER BY SAL DESC)
  3           RANKS FROM EMP) WHERE RANKS=4;

EX:
WAQ TO DISPLAY 3RD SENIOR MOST EMPLOYEE FROM EACH JOB WISE BY USING
DENSE_RANK() ALONG INLINE VIEW?
SQL> SELECT * FROM(SELECT EMPNO,ENAME,JOB,HIREDATE,
  2  DENSE_RANK()OVER(PARTITION BY JOB ORDER BY HIREDATE)
  3  RANKS FROM EMP) WHERE RANKS=3;

2. CO-RELATED SUBQUERY:
========================
	- IN THIS MECHANISM FIRST OUTER QUERY IS EXECUTED AND LATER INNER 
QUERY WILL EXECUTE.

SYNTAX TO FIND OUT "Nth" HIGH / LOW SALARY :
==========================================
SELECT * FROM <TABLE NAME> <TABLE ALIAS NAME1> WHERE N-1=(SELECT 
COUNT(DISTINCT <COLUMN NAME>) FROM <TABLE NAME> <TABLE ALIAS NAME2>
WHERE <TABLE ALIAS NAME2>.<COLUMN NAME> < / > <TABLE ALIAS NAME1>.<COLUMN NAME>);

		< ------------ FINDING LOWEST SALARY
		> ------------ FINDING HIGHEST SALARY

EX:
WAQ TO FIND OUT THE FIRST HIGHEST SALARY EMPLOYEE DETAILS?
SQL> SELECT * FROM EMPLOYEE E1 WHERE 0=(SELECT
  2  COUNT(DISTINCT SAL) FROM EMPLOYEE E2
  3  WHERE E2.SAL > E1.SAL);

SOL:
====
	IF N=1 
		N-1 ====> 1-1 ====> 0






























































































































































































		









