CURSORS:
========
	-CURSOR IS A TEMPORARY MEMORY / SQL PRIVATE AREA / WORKSPACE.
					i) EXPLICIT CURSOR
					ii)IMPLICIT CURSOR

i) EXPLICIT CURSOR(static cursor):
================================
	- these cursors are created by user for fetching multiple 
rows in row by row manner from a cursor memory table.
	- explicit cursor can hold multiple rows but it will access
only one row at a time.
	- to create an explicit cursor memory we need to follow 
the following 4 steps are:

step1: declare cursor variable:
================================
syntax:
=======
declare cursor <cursor name> is <select query>;

step2: open cursor connection:
==============================
syntax:
=======
open <cursor name>;

step3: fetching rows from a cursor memory:
===========================================
syntax:
=======
fetch <cursor name> into <variables>;

step4: close cursor connection:
================================
syntax:
========
close <cursor name>;			

ATTRIBUTES OF AN EXPLICIT CURSORS:
==================================
	- these attributes are used tro check the status of cursor.

i) %isopen:
============
	- it is a default attribute.
	- when cursor connection is successfully open then it returs
true otherwise false.
	- boolean type.

ii) %notfound:
==============
	- when there is no data in cursor then return true otherwise
false.
	- boolean type.

iii) %found:
=============
	- when there is a data in cursor then return true otherwise
false.
	- boolean type.

iv) %rowcount:
==============
	- it returns no.of executed fetch statements.
	- number type.

syntax:
=======
	<cursor name>%<attribute name>;

Ex:
a cursor program to fetch a single row from a table?
SQL> DECLARE CURSOR C1 IS SELECT ENAME,SAL FROM EMP;
    v_ENAME VARCHAR2(10);
    v_SAL NUMBER(10);
    BEGIN
    OPEN C1;
    FETCH C1 INTO v_ENAME,v_SAL;
    DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
    CLOSE C1;
    END;
   /
SMITH,800

PL/SQL procedure successfully completed.

Ex:
a cursor program to fetch multiple rows from a table?
SQL> DECLARE CURSOR C1 IS SELECT ENAME,SAL FROM EMP;
        v_ENAME VARCHAR2(10);
        v_SAL NUMBER(10);
        BEGIN
        OPEN C1;
        FETCH C1 INTO v_ENAME,v_SAL;
        DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
    	  FETCH C1 INTO v_ENAME,v_SAL;
        DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
   	  FETCH C1 INTO v_ENAME,v_SAL;
        DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
		  CLOSE C1;
		  END;
			/
NOTE:
=====
	- In the above example we used no.of fetch statements to
fetch multiple rows from a table.so to avoid this problem we
use "looping statements" like below,

i) by using "smiple loop":
==========================
EX:
SQL> DECLARE CURSOR C1 IS SELECT ENAME,SAL FROM EMP;
  2  v_ENAME VARCHAR2(10);
  3  v_SAL NUMBER(10);
  4  BEGIN
  5  OPEN C1;
  6  LOOP
  7  FETCH C1 INTO v_ENAME,v_SAL;
  8  EXIT WHEN C1%NOTFOUND;
  9  DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
 10  END LOOP;
 11  CLOSE C1;
 12  END;
 13  /
SMITH,800
ALLEN,1600
WARD,1250
JONES,2975
MARTIN,1250
BLAKE,2850
CLARK,2450
SCOTT,3000
KING,5000
TURNER,1500
ADAMS,1100
JAMES,950
FORD,3000
MILLER,1300

ii) by using "while loop":
===========================
EX:
SQL> DECLARE CURSOR C1 IS SELECT ENAME,SAL FROM EMP;
  2  v_ENAME VARCHAR2(10);
  3  v_SAL NUMBER(10);
  4  BEGIN
  5  OPEN C1;
  6  FETCH C1 INTO v_ENAME,v_SAL;----fetch starts from 1st row
  7  WHILE(C1%FOUND)
  8  LOOP
  9  DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
 10  FETCH C1 INTO v_ENAME,v_SAL;----fetching upto last row
 11  END LOOP;
 12  CLOSE C1;
 13  END;
 14  /
SMITH,800
ALLEN,1600
WARD,1250
JONES,2975
MARTIN,1250
BLAKE,2850
CLARK,2450
SCOTT,3000
KING,5000
TURNER,1500
ADAMS,1100
JAMES,950
FORD,3000
MILLER,1300

iii) BY USING "FOR LOOP":
==========================
SQL> DECLARE CURSOR C1 IS SELECT ENAME,SAL FROM EMP;
  2  BEGIN
  3  FOR i IN C1
  4  LOOP
  5  DBMS_OUTPUT.PUT_LINE(i.ENAME||','||i.SAL);
  6  END LOOP;
  7  END;
  8  /
SMITH,800
ALLEN,1600
WARD,1250
JONES,2975
MARTIN,1250
BLAKE,2850
CLARK,2450
SCOTT,3000
KING,5000
TURNER,1500
ADAMS,1100
JAMES,950
FORD,3000
MILLER,1300

2) IMPLICIT CURSORS:
====================
	- these cursors are declared by oracle server by default.
oracle server created implicit cursor memory when we perform
dml operations on a particular table in database.
	- implicit cursors are used to check the status of last
dml query is executed successfully or not.
	- implicit cursor variable name is "SQL".

ATTRIBUTES OF IMPLICIT CURSORS:
===============================
i) %ISOPEN:
===========
	- it is default attribute.
	- it returns true when implicit cursor connection is open
successfully otherwise false.

ii) %notfound:
==============
	- it returns true when the last dml command is fail 
otherwise returns false.

iii) %found:
============
	- it returns true when the last dml command is successfully
executed otherwise false.

iv) %rowcount:
==============
	- it returns the no.of rows affected by dml command.

syntax:
=======
			SQL%<attribute name>

Ex:
SQL> DECLARE
  2  v_EMPNO NUMBER(10);
  3  BEGIN
  4  v_EMPNO:=&v_EMPNO;
  5  DELETE FROM EMP WHERE EMPNO=v_EMPNO;
  6  IF SQL%FOUND THEN
  7  DBMS_OUTPUT.PUT_LINE('RECORD IS FOUND AND DELETED');
  8  ELSE
  9  DBMS_OUTPUT.PUT_LINE('RECORD IS NOT FOUND');
 10  END IF;
 11  END;
 12  /
Enter value for v_empno: 7900
RECORD IS FOUND AND DELETED
PL/SQL procedure successfully completed.

SQL> /
Enter value for v_empno: 1122
RECORD IS NOT FOUND
PL/SQL procedure successfully completed.

REF CURSORS:
============
	- When we assign a "select statement" at time of opening 
a cursor is called as "ref cursor" / "dynamic cursor".
				1) weak ref cursor
				2) strong ref cursor


	weak ref cursor						strong ref cursor
	===============						=================
1. there is no "return type".			1.delcare with "return type".

2. is having its own 					2. there is no pre-defined
pre-defined datatype to 				datatype for strong ref 
declare weak ref cursor variable.	cursor so that we need to 
												create a user defined DT.

3. can access rows(data) from 		3. can access rows(data)
any table(more than one)				from a specific table only
												( one table).

Ex.on weak ref cursor with a single table:
==========================================
SQL> DECLARE
  2  C1 SYS_REFCURSOR;
  3  i EMP%ROWTYPE;
  4  BEGIN
  5  OPEN C1 FOR SELECT * FROM EMP WHERE DEPTNO=10;
  6  LOOP
  7  FETCH C1 INTO i;
  8  EXIT WHEN C1%NOTFOUND;
  9  DBMS_OUTPUT.PUT_LINE(i.ENAME||','||i.SAL||','||i.DEPTNO);
 10  END LOOP;
 11  CLOSE C1;
 12  END;
 13  /
MILLER,1300,10
CLARK,2450,10
KING,5000,10

Ex.on strong ref cursor with a single table:
============================================
creating a user defined DT for strong ref cursor:
=================================================
syntax:
=======
type <type name> is ref cursor return <type>;

EX:
SQL> DECLARE
  2  TYPE UD_REFCURSOR IS REF CURSOR RETURN EMP%ROWTYPE;
  3  C1 UD_REFCURSOR;
  4  i EMP%ROWTYPE;
  5  BEGIN
  6  OPEN C1 FOR SELECT * FROM EMP WHERE DEPTNO=20;
  7  LOOP
  8  FETCH C1 INTO i;
  9  EXIT WHEN C1%NOTFOUND;
 10  DBMS_OUTPUT.PUT_LINE(i.ENAME||','||i.DEPTNO);
 11  END LOOP;
 12  CLOSE C1;
 13  END;
 14  /
SCOTT,20
FORD,20
SMITH,20
ADAMS,20
JONES,20

Ex.on weak ref cursor with multiple tables:
===========================================
SQL> DECLARE
  2  C1 SYS_REFCURSOR;
  3  i EMP%ROWTYPE;
  4  j DEPT%ROWTYPE;
  5  v_DEPTNO NUMBER(10):=&v_DEPTNO;
  6  BEGIN
  7  IF v_DEPTNO = 10 THEN
  8  OPEN C1 FOR SELECT * FROM EMP WHERE DEPTNO=10;
  9  LOOP
 10  FETCH C1 INTO i;
 11  EXIT WHEN C1%NOTFOUND;
 12  DBMS_OUTPUT.PUT_LINE(i.ENAME||','||i.DEPTNO);
 13  END LOOP;
 14  ELSIF v_DEPTNO = 20 THEN
 15  OPEN C1 FOR SELECT * FROM DEPT WHERE DEPTNO=20;
 16  LOOP
 17  FETCH C1 INTO j;
 18  EXIT WHEN C1%NOTFOUND;
 19  DBMS_OUTPUT.PUT_LINE(j.DEPTNO||','||j.DNAME||','||j.LOC);
 20  END LOOP;
 21  CLOSE C1;
 22  END IF;
 23  END;
 24  /
Enter value for v_deptno: 10
MILLER,10
CLARK,10
KING,10
PL/SQL procedure successfully completed.

SQL> /
Enter value for v_deptno: 20
20,RESEARCH,DALLAS
PL/SQL procedure successfully completed.

Ex.on strong ref cursor with multiple tables:
===========================================
SQL> DECLARE
	 TYPE UD_REFCURSOR IS REF CURSOR RETURN EMP%ROWTYPE;
    C1 UD_REFCURSOR;
    i EMP%ROWTYPE;
    j DEPT%ROWTYPE;
    v_DEPTNO NUMBER(10):=&v_DEPTNO;
    BEGIN
    IF v_DEPTNO = 10 THEN
    OPEN C1 FOR SELECT * FROM EMP WHERE DEPTNO=10;
    LOOP
   FETCH C1 INTO i;
   EXIT WHEN C1%NOTFOUND;
   DBMS_OUTPUT.PUT_LINE(i.ENAME||','||i.DEPTNO);
   END LOOP;
   ELSIF v_DEPTNO = 20 THEN
   OPEN C1 FOR SELECT * FROM DEPT WHERE DEPTNO=20;
   LOOP
   FETCH C1 INTO j;
   EXIT WHEN C1%NOTFOUND;
   DBMS_OUTPUT.PUT_LINE(j.DEPTNO||','||j.DNAME||','||j.LOC);
   END LOOP;
   CLOSE C1;
   END IF;
   END;
   /
ERROR:
PLS-00394: wrong number of values in the INTO list of a FETCH statement






































