CLAUSES:
=========
	- CLAUSE IS A STATEMENT WHICH WILL PROVIDE SOME FACILITIES LIKE
"FILTERING ROWS,SORTING VALUES,GROUPING SIMILAR DATA,FINDING SUB TOTAL AND GRAND TOTAL "BASED ON COLUMNS AUTOMATICALLY.
		> WHERE
		> ORDER BY
		> GROUP BY
		> HAVING
		> ROLLUP
		> CUBE

WHERE:
========
	- FILTERING ROWS BEFORE GROUPING DATA IN A TABLE.
	- CAN WORK ON "SELECT,UPDATE,DELETE" COMMANDS ONLY.

SYNTAX:
=======
	WHERE <FILTERING CONDITION>;

EX:
SELECT * FROM EMP WHERE EMPNO=7788;
UPDATE EMP SET SAL=56000 WHERE DEPTNO=20;
DELETE FROM EMP WHERE JOB='CLERK';

ORDER BY:
=========
	- TO ARRANGE A SPECIFIC COLUMN VALUES IN ASCENDING OR DESCENDING
ORDER.
	- BY DEFAULT ORDER BY CAN ARRANGE VALUES IN "ASCENDING" ORDER.IF WE
WANT TO ARRANGE IN DESCENDING ORDER THEN WE "DESC" KEYWORD.

SYNTAX:
========
SELECT * FROM <TN> ORDER BY <COLUMN NAME1> <ASC/DESC>,<COLUMN NAME2> <ASC/DESC>,............................................;

EX:
SQL> SELECT * FROM EMP ORDER BY SAL;
SQL> SELECT SAL FROM EMP ORDER BY SAL DESC;
SQL> SELECT ENAME FROM EMP ORDER BY ENAME;
SQL> SELECT HIREDATE FROM EMP ORDER BY HIREDATE DESC;

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE WORKING UNDER DEPTNO IS 30 AND ARRANGE 
THOSE EMPLOYEES SALARIES IN DESCENDING ORDER?
SQL> SELECT * FROM EMP WHERE DEPTNO=30 ORDER BY SAL DESC;

EX:
WAQ TO DISPLAY EMPLOYEES DEPTNO'S IN ASCENDING ORDER AND THEIR SALARIES
IN DESCENDING ORDER FROM EACH DEPTNO WISE?
SQL> SELECT * FROM EMP ORDER BY DEPTNO,SAL DESC;

NOTE:
=====
	- ORDER BY CLAUSE CAN APPLY ON NOT ONLY COLUMN NAMES EVEN THOUGH 
IT CAN APPLY ON THE POSITION OF COLUMN IN SELECT QUERY.

EX:
SQL> SELECT * FROM EMP ORDER BY SAL DESC;
SQL> SELECT * FROM EMP ORDER BY 6 DESC;
SQL> SELECT EMPNO,ENAME,SAL FROM EMP ORDER BY 3 DESC;
SQL> SELECT ENAME,SAL FROM EMP ORDER BY 2;
SQL> SELECT SAL FROM EMP ORDER BY 1;

ORDER BY  WITH "NULL CLAUSES":
==============================
	1. NULLS FIRST:
	===============
		- BY DEFAULT ORDER BY ON ASCENDING ORDER,
			FIRST : VALUES 
			LATER : NULLS
	EX:
	SQL> SELECT * FROM EMP ORDER BY COMM;

	TO OVERVCOME THIS WE USE "NULLS FIRST" CLAUSE,
			FRIST : NULLS
			LATER : VALUES
	EX:
	SQL> SELECT * FROM EMP ORDER BY COMM NULLS FIRST;

	2. NULLS LAST:
	=============
		- BY DEFAULT ORDER BY ON DESCENDING ORDER,
			FIRST : NULLS
			LATER : VALUES
	EX:
	SQL> SELECT * FROM EMP ORDER BY COMM DESC;

	TO OVERVCOME THIS WE USE "NULLS LAST" CLAUSE,
			FRIST : VALUES
			LATER : NULLS
	EX:
	SQL> SELECT * FROM EMP ORDER BY COMM DESC NULLS LAST;

GROUP BY:
=========	
	- IS USED TO MAKE GROUPS BASED ON A COLUMNS.
	- WHEN WE USE GROUP BY WE SHOULD USE "GROUPING/AGGREGATIVE"
	FUNCTIONS ARE "SUM(),AVG(),MIN(),MAX(),COUNT()".

	EX: TO FIND OUT NO.OF FEMALES & MALES ?

			GROUP BY
			       |
	COUNT(*):	GENDER
			       |
		FEMALE		MALE
		FEMALE		MALE
		FEMALE		MALE	
				MALE
		========		======
		      3		  4
		========		=======

SYNTAX:
========
SELECT <COLUMN NAME1>,...................,<AGGREGATIVE FUNCTION NAME1>,...............
FROM <TABLE NAME> GROUP BY <COLUMN NAME1>,<COLUMN NAME2>,....................;

TABLE:
SQL> SELECT * FROM EMPLOYEE;

ENAME      GENDER
---------- 	 ---------
SMITH      M
ALLEN      F
WARD       F
JONES     M
SCOTT     M

EX:
WAQ TO FIND OUT NO.OF MALE AND FEMALE EMPLOYEES?
SQL> SELECT GENDER,COUNT(*) FROM EMPLOYEE GROUP BY GENDER;
			(OR)
SQL> SELECT GENDER,COUNT(GENDER) FROM EMPLOYEE GROUP BY GENDER;

GENDER		 COUNT(GENDER)
-------------		 -------------
M             		3
F             		2

EX:
WAQ TO TO FIND OUT THE NO.OF EMPLOYEES WORKING IN EACH JOB?
SQL> SELECT JOB,COUNT(JOB) FROM EMP GROUP BY JOB;

EX:
WAQ TO FIND OUT NO.OF EMPLOYEES WORKING IN EACH JOB ALONG WITH THEIR DEPTNO
WISE?
SQL> SELECT JOB,DEPTNO,COUNT(JOB) FROM EMP
  2  GROUP BY JOB,DEPTNO;

EX:
WAQ TO DISPLAY SUM OF SALARY OF EACH DEPTNO WISE?
SQL> SELECT DEPTNO,SUM(SAL) FROM EMP GROUP BY DEPTNO
  2  ORDER BY DEPTNO;

EX:
WAQ TO FIND OUT NO.OF EMPLOYEE,SUM OF SALARY,AVERAGE SALARY,MINIMUM SALARY
AND MAXIMUM SALARY OF EACH DEPTNO?
SQL> SELECT DEPTNO,COUNT(DEPTNO) NO_OF_EMPLOYEES,
  2  SUM(SAL) SUM_SAL,AVG(SAL) AVG_SAL,
  3  MIN(SAL) MIN_SAL,MAX(SAL) MAX_SAL FROM EMP
  4  GROUP BY DEPTNO ORDER BY DEPTNO;

HAVING:
=======
	- FILTERING ROW AFTER GROUPING DATA IN A TABLE.

SYNTAX:
=======
SELECT <COLUMN NAME1>,...................,<AGGREGATIVE FUNCTION NAME1>,...............
FROM <TABLE NAME> GROUP BY <COLUMN NAME1>,<COLUMN NAME2>,.................
HAVING <FILTERING CONDITION>;

EX:
WAQ TO DISPLAY JOBS IN WHICH JOB THE NO.OF EMPLOYEES ARE MORE THAN 3?
SQL> SELECT JOB,COUNT(JOB) FROM EMP
  2  GROUP BY JOB HAVING COUNT(JOB)>3;

JOB       		COUNT(JOB)
--------- 		----------
CLERK              	4
SALESMAN           	4

NOTE:
=====
	- WE CANNOT USE "AGGREGATIVE FUNCTIONS" UNDER "WHERE CLAUSE" CONDITION.


EX:
WAQ TO DISPLAY DEPTNO's IN WHICH DEPTNO SUM OF SALARY IS LESS THAN 10000?
SQL> SELECT DEPTNO,SUM(SAL) FROM EMP
  2  GROUP BY DEPTNO HAVING SUM(SAL)<10000;

ALL CLAUSES IN A SINGLE SELECT QUERY:
======================================
SYNTAX:
========
SELECT <COLUMN NAME1>,..............................,<AGGREGATIVE FUNCTION NAME1>,.........
FROM <TABLE NAME> [ WHERE <FILTERING CONDITION>
		    GROUP BY <COLUMN NAME1>,...........
		    HAVING <FILTERING CONDITION>
		    ORDER BY <COLUMN NAME1><ASC/DESC>,...........
		    ];

EX:
SQL> SELECT DEPTNO,COUNT(DEPTNO) FROM EMP
  2  WHERE SAL>1000
  3  GROUP BY DEPTNO
  4  HAVING COUNT(DEPTNO)>3
  5  ORDER BY DEPTNO;

    DEPTNO 	COUNT(DEPTNO)
---------- 		-------------
        20             	4
        30             	5

EXECUTION ORDER OF CLAUSES:
=============================
	> FROM
		> WHERE 
			> GROUP BY
				    > HAVING
					   > ORDER BY

ROLLUP & CUBE:
===============
	- TO FIND OUT SUB TOTAL & GRAND TOTAL.
		ROLLUP : BASED ON SINGLE COLUMN WISE.
		CUBE     : BASED ON MULTIPLE COLUMNS WISE.
	- THESE CLAUSES CAN USE ALONG WITH GROUP BY CLAUSE ONLY.

SYNTAX FOR ROLLUP:
===================
SELECT <COLUMN NAME1>,..................................,<AGGREGATIVE FUNCTION NAME1>,.......
FROM <TN> GROUP BY ROLLUP(<COLUMN NAME1>,<COLUMN NAME2>,.........................);
			
EX:
SQL> SELECT DEPTNO,COUNT(DEPTNO) FROM EMP
  2  GROUP BY ROLLUP(DEPTNO);

    DEPTNO 	COUNT(DEPTNO)
---------- 		-------------
        10             	3
        20             	5
        30             	6
                      	14

EX:
SQL> SELECT DEPTNO,JOB,COUNT(DEPTNO) FROM EMP
  2  GROUP BY ROLLUP(DEPTNO,JOB);

EX:
SQL> SELECT JOB,DEPTNO,COUNT(JOB) FROM EMP
  2  GROUP BY ROLLUP(JOB,DEPTNO);

SYNTAX FOR CUBE:
===================
SELECT <COLUMN NAME1>,..................................,<AGGREGATIVE FUNCTION NAME1>,.......
FROM <TN> GROUP BY CUBE(<COLUMN NAME1>,<COLUMN NAME2>,.........................);

EX:
SQL> SELECT DEPTNO,COUNT(*) FROM EMP GROUP BY CUBE(DEPTNO)
         ORDER BY DEPTNO;

SQL> SELECT DEPTNO,JOB,COUNT(DEPTNO) FROM EMP
         GROUP BY CUBE(DEPTNO,JOB) ORDER BY DEPTNO;

NOTE:
======
	- ROLLUP AND CUBE CLAUSES ARE MOSTLY USING IN DATAWAREHOUSE
(BIG DATA) FOR DATA SUMMERIZED.

GROUPING_ID():
=============
	- IT IS A PRE-DEFINED FUNCTION IN ORACLE.
	- IS USED TO MORE COMPACT WAY TO IDENTIFY SUB TOTAL ROWS AND 
GRAND TOTAL ROW FROM THE RESULT SET.

SYNTAX:
=======
	GROUPING_ID(<COLUMN NAME1>,<COLUMN NAME2>,.................);

	ID NUMBER
	==========
		1	- THE FIRST GROUPING COLUMN SUB TOTAL ROWS
		2	- THE SECOND GROUPING COLUMN SUB TOTAL ROWS
		3	- GRAND TOTAL ROW


EX:
SQL> SELECT DEPTNO,JOB,COUNT(DEPTNO),GROUPING_ID(DEPTNO,JOB) FROM EMP
          GROUP BY CUBE(DEPTNO,JOB) ORDER BY DEPTNO;
==============================================================================

















































































		




























































