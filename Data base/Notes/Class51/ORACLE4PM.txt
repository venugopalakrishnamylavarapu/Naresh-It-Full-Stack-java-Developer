sub blocks:
===========
	- are named blocks which can store a program source code 
in database automatically.
	- sub block objects are 4 types those are,
				1. stored procedures
				2. stored functions
				3. packages
				4. triggers

1. stored procedures:
=====================
	- it is a named object which contains 
pre-compiled code / query.
	- it is a block code to perform some operation and it may
be or may not be return a value.
	- generally stored procedures are never returns a value.if
a procedure want to return a value then we use "OUT" parameters
in stored procedure.

syntax:
========
create [or replace] procedure <pname>(<parameter name1> [mode type] <datatype>,.........)
is / as
<declare variables>;
begin
<procedure body / statements>;
end;
/

How to call a stored procedure:
================================
syntax1:
========
execute <pname>(value/(s));
		(or)
exec <pname>(value / (s));

syntax2: anonymous block:
=========================
begin
<pname>(value / (s));
end;
/

Types of parameters modes:
==========================
	- in pl/sql a stored procedure is supporting the following
three types of parameters modes those are,
				I) IN mode
				II) OUT mode
				III) IN OUT mode

I) IN mode:
===========
	- these parameters are storing input values which was given
by user at execution time.
	- these are default parameters of a stored procedure.

II) OUT mode:
=============
	-these parameters are used to return output value from a 
stored procedure.


III) IN OUT mode:
=================
	- a prameter which can store and also which can return a
value.

Ex.on IN mode:
==============
create a SP to accept empno as IN parameter and display that
employee name and salary details from emp table?
SQL> CREATE OR REPLACE PROCEDURE SP1(p_EMPNO IN NUMBER)
  2  IS
  3  v_ENAME VARCHAR2(10);
  4  v_SAL NUMBER(10);
  5  BEGIN
  6  SELECT ENAME,SAL INTO v_ENAME,v_SAL FROM EMP
  7  WHERE EMPNO=p_EMPNO;
  8  DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
  9  END;
 10  /

Procedure created.

CALLING A SP:
=============
SQL> EXECUTE SP1(7788);
SCOTT,3000
			(OR)
SQL> EXEC SP1(7788);
SCOTT,3000
			(OR)
SQL> BEGIN
  2  SP1(7788);
  3  END;
  4  /
SCOTT,3000






















