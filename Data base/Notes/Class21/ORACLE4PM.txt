==============================================================================
DATAINTEGRITY:
==============
	- TO MAINTAIN ACCURATE AND CONSISTENCY DATA IN DB TABLES.
		1. DECLARATIVE INTEGRITY
			> CAN IMPLEMENTING BY USING "CONSTRAINTS"(SQL)
		2. PROCEDURAL INTEGRITY 
			> CAN IMPLEMENTING BY USING "TRIGGERS"(PL/SQL)

1. DECLARATIVE INTEGRITY:
=========================
	i) ENTITY INTEGRITY
	ii) REFERENCIAL INTEGRITY
	iii) DOMAIN INTEGRITY

i) ENTITY INTEGRITY:
==================
	- IT ENSURE THAT EACH ROW IN A TABLE SHOULD BE UNIQUE IDENTITY.
	- IT CAN BE IMPLEMENTED BY USING "UNIQUE , PRIMARY KEY" CONSTRAINTS.

ii) REFERENCIAL INTEGRITY:
=========================
	- TO MAKING RELATIONSHIPS BETWEEN TABLES.
	- BY USING "FOREIGN KEY" CONSTRAINT.

iii) DOMAIN INTEGRITY:
====================
	- TO CHECK VALUES WITH USER DEFINED CONDITION BEFORE ACCEPTING 
	INTO A COLUMN.
	- IT CAN BE IMPLEMENTED BY USING "CHECK,NOT NULL,DEFAULT" CONSTRAINTS.

CONSTRAINTS:
=============
	- ARE USED TO RESTRICTED / ENFORCE UNWANTED DATA FROM DB TABLES.
	- THESE ARE 6 TYPES,
		> UNIQUE
		> NOT NULL
		> CHECK
		> PRIMARY KEY
		> FOREIGN KEY / REFERENCES 
		> DEFAULT 
	- ALL DATABASES ARE SUPPORTING TWO TYPES OF METHODS TO DEFINED 
CONSTRAINTS ON A TABLE.

i) COLUMN LEVEL:
================
	- TO DEFINE A CONSTRAINT ON EACH COLUMN WISE.

SYNTAX:
=======
CREATE TABLE <TABLE NAME>
(
<COLUMN NAME1> <DATATYPE>[SIZE] <CONSTRAINT TYPE>,
<COLUMN NAME2> <DATATYPE>[SIZE] <CONSTRAINT TYPE>,
................................................................................................,
................................................................................................
);

ii) TABLE LEVEL:
==============
	- TO DEFINE A CONSTRAINT AFTER ALL COLUMNS ARE DESIGNED.
	i.e END OF THE TABLE.

SYNTAX:
=======
CREATE TABLE <TABLE NAME>
(
<COLUMN NAME1> <DATATYPE>[SIZE],
<COLUMN NAME2> <DATATYPE>[SIZE],
............................................................,
...........................................................,
<CONSTRAINT TYPE>(<COLUMN NAME1>,.........)
);

UNIQUE:
========
	- TO RESTRCITED DUPLICATE VALUES.
	- BUT ALLOWED "NULLS".
EX:
COLUMN LEVEL:
==============
SQL> CREATE TABLE TEST1
  2  (
  3  SNO INT UNIQUE,
  4  SNAME VARCHAR2(10) UNIQUE
  5  );

TESTING:
SQL> INSERT INTO TEST1 VALUES(1,'A');----------------ALLOWED
SQL> INSERT INTO TEST1 VALUES(1,'A');---------------NOT ALLOWED
SQL> INSERT INTO TEST1 VALUES(NULL,NULL);-----ALLOWED
SQL> INSERT INTO TEST1 VALUES(2,'B');-------ALLOWED

TABLE LEVEL:
============
SQL> CREATE TABLE TEST2
  2  (
  3  SNO INT,
  4  SNAME VARCHAR2(10),
  5  UNIQUE(SNO,SNAME) -----------------> COMPOSITE UNIQUE CONSTRAINT
  6  );

TESTING:
=========
SQL> INSERT INTO TEST2 VALUES(1,'A');------ALLOWED
SQL> INSERT INTO TEST2 VALUES(1,'A');------NOT ALLOWED
SQL> INSERT INTO TEST2 VALUES(2,'A');------ALLOWED







