HTML <select> Tag
It is used to create a drop-down list. The <option> tags inside the <select> element define the available options in the list.  It is a paired tag.

Syntax:
<select>.......................</select>

Attributes
Attribute 	Value 	Description
disabled 	disabled 	Specifies that a drop-down list should be disabled
multiple 	multiple 	Specifies that multiple options can be selected at once
name 	name 	Defines a name for the drop-down list
size	number 	Defines the number of visible options in a drop-down list

HTML <optgroup> Tag
It is used to group related options in a drop-down list. If you have a long list of options, groups of related options are easier to handle for a user. It is a paired tag.

Syntax:
<optgroup>.................................</optgroup> 

Attributes
Attribute 	Value 	Description
disabled 	disabled 	Specifies that an option-group should be disabled
label 	text 	Specifies a label for an option-group

HTML <option> Tag
It defines an option in a select list.  It is a paired tag.

Syntax
<option>....................................</option> 

Attributes
Attribute 	Value 	Description
disabled 	disabled 	Specifies that an option should be disabled
label 	text 	Specifies a shorter label for an option
selected 	selected 	Specifies that an option should be pre-selected when the page loads
value 	text 	Specifies the value to be sent to a server

Example:
<html>
<body>
<select>
<optgroup label="Swedish Cars">
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
</optgroup>
</select>
 </body>
</html>

Example:
<html>
<body>
<select>
<optgroup label="Swedish Cars">
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
</optgroup>
<optgroup label="Select Your Hobby">
<option value="cricket">Cricket</option>
<option value="WatchTV">Watch Tv </option>
<option value="PlayGame">Play Game</option>
<option value="Reading">Reading</option>
<option value="Int">Internet Surfing</option>
</optgroup>
</select>
</form >
</body>
</html>

List Box:
HTML <select> multiple Attribute
The multiple attribute is a boolean attribute. It specifies that multiple options can be selected at once.

Syntax
<select multiple> 

Example:
<html>
<body>
<form>
<select name="cars" multiple>
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
<option value="opel">Opel</option>
<option value="audi">Audi</option>
</select>
<input type="submit"  value="NextPage">
</form>
</body>
</html>

HTML <select> size Attribute
The size attribute specifies the number of visible options in a drop-down list.

Syntax
<select size="number">

Attribute Values
Value 	Description
number 	The number of visible options in the drop-down list. Default value is 1. If the multiple 		attribute is present, the default value is 4

Example:
<html>
<body>
<select size="3">
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
<option value="opel">Opel</option>
<option value="audi">Audi</option>
</select>
</body>
</html>

Radio Button Control
Radio buttons are used when out of many options, just one option is required to be selected. They are also created using HTML <input> tag but type attribute is set to radio.

Syntax:
<input type='radio'/>

Example5
<form>
<label>What is your favourites Web browser..!</label>
<input type="radio" name="browser" /> Internet Explorer 
<input type="radio" name="browser"  /> Google Chrome
<input type="radio" name="browser" /> Mozilla Firefox
</form>

Checkbox Control
Checkboxes are used when more than one option is required to be selected. They are also created using HTML <input> tag but type attribute is set to checkbox..

Syntax:
<input type='checkbox'/>

Example:
<form>
<label>Select your hobby...!!</label>
<input type="checkbox" name="cricket" /> Cricket 
<input type="checkbox" name="watchtv" /> Watch TV 
<input type="checkbox" name="playgame"  /> Play Game
<input type="checkbox" name="inserf"  /> Internet Browsing 
</form>

Button Controls
There are various ways in HTML to create clickable buttons.
Type	Description
submit	This creates a button that automatically submits a form.
reset	This creates a button that automatically resets form controls to their initial values.
button	This creates a button that is used to trigger a client-side script when the user clicks 	that 	button.

Example:
<!doctype html>
<body>
<form action="https://www.nareshit.com" name='myform' id="form1" >
<label>User Name:</label><br/>
<input type='text' name='uname' required="requried" /><br/>
<label>Password:</label><br/>
<input type='password' name='pwd' required="requried" /><br/>
<input type='submit' name='sn' value="SignIn"/>
<input type='reset' name='can' value="Cancel"/>
<button onclick="alert('UserClickedMe')"> Click_Me </button>
</form>
</body>

Example:
<!doctype html>
<body>
<form action="nit1.html" name="myform" id="form1">
<label>User Name: </label> <br/>
<input type="text" name="uname"> <br/>
<label>Password: </label> <br/>
<input type="password" name="pwd"> <br/>
<input type="submit" name="sn">
<input type="reset" name="clr">
<button onclick="alert('Hello')">Click</button>
<input type='image' src="html5.png" width="10px" height="10px"/>
</form>
</body>

<fieldset>
It defines a group of form elements as being logically related. The browser draws a box around the set of fields to indicate that they are related. It is a paired tag.

Syntax: 
<fieldset>...................</fieldset>

Example:
<fieldset>
favorite area: <input name="favegame"><br>
<input type=checkbox name="cricket"> like cricket<br>
<input type=checkbox name="chess"> like chess<br>
<input type=checkbox name="java"> like software<br>
</fieldset><p>

<legend> 
It is used with <fieldset> to give a title to each set of fields. It is a paired tag.

Syntax: 
<legend>.............</legend>

Attributes 	 Parameters
align 		right, center, left

Example:
<FIELDSET>
<LEGEND>Personal Stuff</LEGEND><P>
name: <INPUT NAME="realname"><BR>
email: <INPUT NAME="email">
</FIELDSET>

Forms and Table:
<html>
<head>
<title>
Working with table
</title>
</head>
<table bgcolor="lightblue" height="10%" width="250">
<tr><td>User Name:</td><td><Input placeholder="Name"></td></tr>
<tr><td>Password:</td><td><Input type="password" placeholder="password"></td></tr
<tr><td>&nbsp</td><td><Input type="button" value=Login ></td></tr>
</table>

Introduction HTTP:
It is designed to enable communications between clients and servers.HTTP works as a request-response protocol between a client and server. A web browser may be the client, and an application on a computer that hosts a web site may be the server.

Block Diagram of HTTP:

HTTP Request Methods:
Two commonly used methods for a request-response between a client and server are: 
1 GET 
2 POST
    
Action Attribute:
This attribute is used to specify the URL of the server page to which we want to send our form data.

Syntax:
<form name="myform" action="user.aspx">

i. get:-
In this method, we dont have security for our data and only limited data can be sent to the server page. This is the default method of the form. It can carry raw data from client to server
(rawdata ==> the data which is understandable to user)

Syntax:
<form  action="page.py" method="get">

When to use GET?
Information sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2048 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases. GET may be used for sending non-sensitive data.

Note: GET should NEVER be used for sending passwords or other sensitive information!

Example:1
<body>
<form action="nit.html" method="get" name='myform'>
<label>User Name:</label> <br/>
<input type='text' name="user"><br/>
<label>Password:</label> <br/>
<input type="password" name="pass"><br/>
<input type="Submit" value="Sign-In">
<input type="reset" value="Cancel">
</form>
</body>

Some other notes on GET requests:
1 GET requests can be cached
2 GET requests remain in the browser history
3 GET requests can be bookmarked
4 GET requests should never be used when dealing with sensitive data
5 GET requests have length restrictions

The POST Method
In this method, we have security for our data and we can send bulk of data to the server. It can carry encrypted data from client to server page. (Encrypted means machine understandable format).

Syntax:
<form  method="post">

When to use POST?
Information sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send. Moreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server.

Example:
<body>
<form action="nit.html" method="post" name='myform'>
<label>User Name:</label> <br/>
<input type='text' name="user"><br/>
<label>Password:</label> <br/>
<input type="password" name="pass"><br/>
<input type="Submit" value="Sign-In">
<input type="reset" value="Cancel">
</form>
</body>

1 POST requests are never cached
2 POST requests do not remain in the browser history
3 POST requests cannot be bookmarked
4 POST requests have no restrictions on data length

Difference between GETand POST:
GET					POST
Data is visible on URL address		Not visible post information
Unsecured		   		highly secured
Excellent Peformance	   		Good Performance
Transfer limited amount of data    	TransferHugeAmountOfData
Unable to Upload file	    		We can Upload files
Can be cached				Not cached
