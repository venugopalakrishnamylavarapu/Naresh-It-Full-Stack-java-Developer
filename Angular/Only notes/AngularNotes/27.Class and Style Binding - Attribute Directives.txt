Attribute Directives
- Attribute directives are responsible for making the markup more interactive and responsive.
- Angular provides 2 types attributes directives
            a) ngClass
            b) ngStyle


                                NgClass
                                ------------
- It is used to apply a CSS class dynamically to any element.
- So that you can change the appearence of element dynamically.

             <div class="text-danger"> Valid | Invalid </div>

- This is often called as "Class Binding" in Angular.
- CSS class can be applied to any element using NgClass directive in 3 ways

                a) Using a string reference
                b) Using an Array reference
                c) Using an Object reference

Syntax:
            <div  [ngClass]=" 'className' ">
            <div  [ngClass]="[ 'class1', 'class2']">
            <div  [ngClass]="{ 'class1':true, 'class2':false}">

- String reference will allow to set and change one CSS class.
- Array reference will allow to set or change multiple CSS classes.
- Object reference will allow to turn ON or OFF the classes using boolean value. [true, false]

Ex:
 class-binding.component.css

 .bg-style {
    background-color: yellow;
}
.text-style {
    color:red;
    text-align: center;
    padding: 10px;
}
.border-style {
    border:2px solid red;
}

 class-binding.component.html

<div class="container-fluid">
    <h2>Class Binding</h2>
    <ul class="list-unstyled">
        <li><input ngModel #border="ngModel" type="checkbox">Border</li>
        <li><input ngModel #background="ngModel" type="checkbox">Background</li>
        <li><input ngModel #text="ngModel" type="checkbox">Text Effect</li>
    </ul>
    <h1 [ngClass]="'bg-style'">Sample Text</h1>
    <h1 [ngClass]="['bg-style','text-style','border-style']">Sample Text</h1>
    <h1 [ngClass]="{'bg-style':background.value, 'text-style':text.value, 'border-style':border.value}">Sample Text</h1>
</div>

Ex:
class-binding.component.css

.dark-theme {
    background-color: black;
    color:white;
}

class-binding.component.html

<div class="container-fluid d-flex justify-content-center align-items-center" style="height:400px">

   <div>
    <div class="form-switch">
        <input type="checkbox" ngModel #darkTheme="ngModel" class="form-check-input"> <label class="form-check-label"> Dark Theme </label>
     </div>
     <form class="border border-2 p-2" [ngClass]="{'dark-theme':darkTheme.value}">
        <h2><span class="bi bi-person-fill"></span>User Login</h2>
        <dl>
           <dt>User Name</dt>
           <dd><input type="text" [ngClass]="{'bg-danger':UserName.invalid}" name="UserName" required minlength="4" ngModel #UserName="ngModel" class="form-control"></dd>
           <dt>Password</dt>
           <dd><input type="password" ngModel #Password="ngModel" class="form-control"></dd>
        </dl>
        <button class="btn btn-dark w-100">Login</button>
      </form>
   </div>
</div>

                                    NgStyle
- It defines inline styles for HTML element.
- Inline styles are inidividual for any element and are not accessible to other elements.
- They are faster in rendering as they are configured native to element.
- How ever you can't re-use the inline styles.
- NgStyle can apply and change inline styles dynamically.
- It uses a style object with style properties and values.

Syntax:
            <div  [ngStyle]="{attribute:value, attribute:value}">

- Applying inline style dynamically to any element in Angular is known as "Style Binding".

Ex:
class-binding.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-class-binding',
  templateUrl: './class-binding.component.html',
  styleUrls: ['./class-binding.component.css']
})
export class ClassBindingComponent {

      public bgStyle:string = 'red';
      public textStyle:string = 'white';
      public padding:string = "0px";
      public fontSize:string = "0px";

      public styleObject:{'background-color':string, 'color':string, 'padding':string, 'font-size':string} = {
          "background-color" : "red",
          "color" : "white",
          "padding": "10px",
          "font-size": "10px",
      }
      public ApplyClick(){
         this.styleObject = {
             "background-color": this.bgStyle,
             "color": this.textStyle,
            "padding": this.padding + "px",
            "font-size": this.fontSize + "px"
         }
      }
      public FontChange(){
        this.styleObject = {
          "background-color": this.bgStyle,
          "color": this.textStyle,
           "padding": this.padding + "px",
           "font-size": this.fontSize + "px"
          }
      }
}

class-binding.component.html

<div class="container">
    <h3>Select Styles</h3>
    <dl>
        <dt>Background</dt>
        <dd>
            <select [(ngModel)]="bgStyle">
                <option value="red">Red</option>
                <option value="green">Green</option>
                <option value="blue">Blue</option>
                <option value="yellow">Yellow</option>
            </select>
        </dd>
        <dt>Text Color</dt>
        <dd>
            <select [(ngModel)]="textStyle">
                <option value="red">Red</option>
                <option value="black">Black</option>
                <option value="white">White</option>
                <option value="yellow">Yellow</option>
            </select>
        </dd>
        <dt>Padding</dt>
        <dd>
            1px <input [(ngModel)]="padding" type="range" min="1" value="1" max="50"> 50px
        </dd>
        <dt>Font Size</dt>
        <dd>
            10px <input (change)="FontChange()" [(ngModel)]="fontSize" type="range" min="10" max="100" value="10">
        </dd>
        <dd><button (click)="ApplyClick()" class="btn btn-primary">Apply</button></dd>
    </dl>
    <div class="container-fluid d-flex justify-content-center align-items-center" style="height:400px">
        <h1 [ngStyle]="styleObject">Welcome to Angular</h1>
    </div>
</div>

Summary - Angular Components

- Component Directive
- Structural Directive
- Attribute Directive
- Data Binding
- Style Binding
- Class Binding

                             Event Binding